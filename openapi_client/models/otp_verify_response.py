# coding: utf-8

"""
    The SMS Works API

    The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

    The version of the OpenAPI document: 1.9.0
    Contact: support@thesmsworks.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OTPVerifyResponse(BaseModel):
    """
    Response schema for the /otp/verify method
    """ # noqa: E501
    destination: Optional[StrictStr] = Field(default=None, description="The mobile number that the OTP was sent to")
    status: Optional[StrictStr] = Field(default=None, description="The status of the OTP. If the passcode is used within the validity period then this will be 'VERIFIED', otherwise it will be 'EXPIRED'")
    passcode: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The passcode used.")
    validity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The length of time in seconds for which the generated passcode is valid.")
    metadata: Optional[Union[str, Any]] = Field(default=None, description="A JSON object storing data supplied when this passcode was generated, for use in your application.")
    created: Optional[StrictStr] = Field(default=None, description="The ISO 8601 date/time at which this OTP was created")
    expires: Optional[StrictStr] = Field(default=None, description="The ISO 8601 date/time at which this OTP expires")
    modified: Optional[StrictStr] = Field(default=None, description="The ISO 8601 date/time at which this OTP was modified (typically when it was verified)")
    __properties: ClassVar[List[str]] = ["destination", "status", "passcode", "validity", "metadata", "created", "expires", "modified"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OTPVerifyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OTPVerifyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destination": obj.get("destination"),
            "status": obj.get("status"),
            "passcode": obj.get("passcode"),
            "validity": obj.get("validity"),
            "metadata": obj.get("metadata"),
            "created": obj.get("created"),
            "expires": obj.get("expires"),
            "modified": obj.get("modified")
        })
        return _obj


