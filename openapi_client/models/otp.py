# coding: utf-8

"""
    The SMS Works API

    The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

    The version of the OpenAPI document: 1.9.0
    Contact: support@thesmsworks.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OTP(BaseModel):
    """
    Parameters for the generation and sending of One-Time Passwords
    """ # noqa: E501
    sender: Optional[StrictStr] = Field(default=None, description="The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.")
    destination: Optional[StrictStr] = Field(default=None, description="The phone number of the recipient.")
    length: Optional[Union[str, Any]] = Field(default=None, description="The length of the generated passcode. The default length is 6 characters, which will apply if this parameter is omitted. All generated passcodes are numeric. Optional.")
    template: Optional[StrictStr] = Field(default=None, description="A template to use as the content for the message. You must include the '{{passcode}}' placeholder, which will be replaced by the generated passcode when the message is sent. Optional.")
    validity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The length of time in seconds for which the generated passcode should be valid. Optional.")
    passcode: Optional[StrictStr] = Field(default=None, description="A passcode you supply for use in the message template. This will be stored on the OTP record in our system for later verification. Optional.")
    metadata: Optional[Union[str, Any]] = Field(default=None, description="A JSON object of no longer than 1024 bytes, containing as many parameters as you wish, to store data for use in your application. This will be returned when you verify the passcode.")
    __properties: ClassVar[List[str]] = ["sender", "destination", "length", "template", "validity", "passcode", "metadata"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OTP from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OTP from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sender": obj.get("sender"),
            "destination": obj.get("destination"),
            "length": obj.get("length"),
            "template": obj.get("template"),
            "validity": obj.get("validity"),
            "passcode": obj.get("passcode"),
            "metadata": obj.get("metadata")
        })
        return _obj


