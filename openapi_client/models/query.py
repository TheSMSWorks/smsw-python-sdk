# coding: utf-8

"""
    The SMS Works API

    The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

    The version of the OpenAPI document: 1.9.0
    Contact: support@thesmsworks.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.query_metadata import QueryMetadata
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Query(BaseModel):
    """
    search parameters for querying the message database
    """ # noqa: E501
    status: Optional[StrictStr] = Field(default=None, description="The status of the messages you would like returned (either 'SENT', 'DELIVERED', 'EXPIRED', 'UNDELIVERABLE', 'REJECTED' or 'INCOMING')")
    credits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of credits used on the message. Floating point number.")
    destination: Optional[StrictStr] = Field(default=None, description="The phone number of the recipient. Start UK numbers with 44 and drop the leading 0.")
    sender: Optional[StrictStr] = Field(default=None, description="The sender of the message (this can be the configured sender name for an outbound message or the senders phone number for an inbound message).")
    keyword: Optional[StrictStr] = Field(default=None, description="The keyword used in the inbound message")
    var_from: Optional[StrictStr] = Field(default=None, description="The date-time from which you would like matching messages", alias="from")
    to: Optional[StrictStr] = Field(default=None, description="The date-time to which you would like matching messages")
    limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum number of messages that you would like returned in this call. The default is 1000.")
    skip: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of results you would like to ignore before returning messages. In combination with the 'limit' parameter his can be used to page results, so that you can deal with a limited number in your logic at each time.")
    unread: Optional[StrictBool] = Field(default=None, description="In queries for incoming messages ('status' is 'INCOMING'), specify whether you explicitly want unread messages (true) or read messages (false). Omit this parameter in other circumstances.")
    metadata: Optional[QueryMetadata] = None
    __properties: ClassVar[List[str]] = ["status", "credits", "destination", "sender", "keyword", "from", "to", "limit", "skip", "unread", "metadata"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Query from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Query from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "credits": obj.get("credits"),
            "destination": obj.get("destination"),
            "sender": obj.get("sender"),
            "keyword": obj.get("keyword"),
            "from": obj.get("from"),
            "to": obj.get("to"),
            "limit": obj.get("limit"),
            "skip": obj.get("skip"),
            "unread": obj.get("unread"),
            "metadata": QueryMetadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None
        })
        return _obj


