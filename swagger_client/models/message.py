# coding: utf-8

"""
    The SMS Works API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Message(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender': 'str',
        'destination': 'str',
        'content': 'str',
        'schedule': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'sender': 'sender',
        'destination': 'destination',
        'content': 'content',
        'schedule': 'schedule',
        'tag': 'tag'
    }

    def __init__(self, sender=None, destination=None, content=None, schedule=None, tag=None):
        """
        Message - a model defined in Swagger
        """

        self._sender = None
        self._destination = None
        self._content = None
        self._schedule = None
        self._tag = None

        self.sender = sender
        self.destination = destination
        self.content = content
        self.schedule = schedule
        if tag is not None:
          self.tag = tag

    @property
    def sender(self):
        """
        Gets the sender of this Message.
        The name of the sender of the message (e.g. \"AcmePizza\")

        :return: The sender of this Message.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this Message.
        The name of the sender of the message (e.g. \"AcmePizza\")

        :param sender: The sender of this Message.
        :type: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def destination(self):
        """
        Gets the destination of this Message.
        Telephone number of the recipient

        :return: The destination of this Message.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this Message.
        Telephone number of the recipient

        :param destination: The destination of this Message.
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def content(self):
        """
        Gets the content of this Message.
        Message to send to the recipient. Content can be up to 640 characters in length. You will be charged 1 credit for each 160 characters, up to a maximum of 4 credits. Messages sent to numbers registered outside the UK will be charged double credits (i.e. 2 credits per 160 characters, up to maximum of 8 credits).

        :return: The content of this Message.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Message.
        Message to send to the recipient. Content can be up to 640 characters in length. You will be charged 1 credit for each 160 characters, up to a maximum of 4 credits. Messages sent to numbers registered outside the UK will be charged double credits (i.e. 2 credits per 160 characters, up to maximum of 8 credits).

        :param content: The content of this Message.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def schedule(self):
        """
        Gets the schedule of this Message.
        Date-time at which to send the message. This is only used by the message/schedule service.

        :return: The schedule of this Message.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this Message.
        Date-time at which to send the message. This is only used by the message/schedule service.

        :param schedule: The schedule of this Message.
        :type: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def tag(self):
        """
        Gets the tag of this Message.
        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns.

        :return: The tag of this Message.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Message.
        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns.

        :param tag: The tag of this Message.
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
