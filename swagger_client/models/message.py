# coding: utf-8

"""
    The SMS Works API

    The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.  # noqa: E501

    OpenAPI spec version: 1.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.big_decimal import BigDecimal  # noqa: F401,E501


class Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender': 'str',
        'destination': 'str',
        'content': 'str',
        'schedule': 'str',
        'tag': 'str',
        'ttl': 'BigDecimal',
        'responseemail': 'list[str]',
        'metadata': 'object'
    }

    attribute_map = {
        'sender': 'sender',
        'destination': 'destination',
        'content': 'content',
        'schedule': 'schedule',
        'tag': 'tag',
        'ttl': 'ttl',
        'responseemail': 'responseemail',
        'metadata': 'metadata'
    }

    def __init__(self, sender=None, destination=None, content=None, schedule=None, tag=None, ttl=None, responseemail=None, metadata=None):  # noqa: E501
        """Message - a model defined in Swagger"""  # noqa: E501
        self._sender = None
        self._destination = None
        self._content = None
        self._schedule = None
        self._tag = None
        self._ttl = None
        self._responseemail = None
        self._metadata = None
        self.discriminator = None
        self.sender = sender
        self.destination = destination
        self.content = content
        if schedule is not None:
            self.schedule = schedule
        if tag is not None:
            self.tag = tag
        if ttl is not None:
            self.ttl = ttl
        if responseemail is not None:
            self.responseemail = responseemail
        if metadata is not None:
            self.metadata = metadata

    @property
    def sender(self):
        """Gets the sender of this Message.  # noqa: E501

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.  # noqa: E501

        :return: The sender of this Message.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this Message.

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.  # noqa: E501

        :param sender: The sender of this Message.  # noqa: E501
        :type: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def destination(self):
        """Gets the destination of this Message.  # noqa: E501

        Telephone number of the recipient  # noqa: E501

        :return: The destination of this Message.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Message.

        Telephone number of the recipient  # noqa: E501

        :param destination: The destination of this Message.  # noqa: E501
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def content(self):
        """Gets the content of this Message.  # noqa: E501

        Message to send to the recipient. Content can be up to 1280 characters in length. You will be charged 1 credit for each 160 characters, up to a maximum of 8 credits. Messages sent to numbers registered outside the UK will be charged double credits (i.e. 2 credits per 160 characters, up to maximum of 8 credits).  # noqa: E501

        :return: The content of this Message.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Message.

        Message to send to the recipient. Content can be up to 1280 characters in length. You will be charged 1 credit for each 160 characters, up to a maximum of 8 credits. Messages sent to numbers registered outside the UK will be charged double credits (i.e. 2 credits per 160 characters, up to maximum of 8 credits).  # noqa: E501

        :param content: The content of this Message.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def schedule(self):
        """Gets the schedule of this Message.  # noqa: E501

        Date at which to send the message. This is only used by the message/schedule service and can be left empty for other services.  # noqa: E501

        :return: The schedule of this Message.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Message.

        Date at which to send the message. This is only used by the message/schedule service and can be left empty for other services.  # noqa: E501

        :param schedule: The schedule of this Message.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def tag(self):
        """Gets the tag of this Message.  # noqa: E501

        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns.  # noqa: E501

        :return: The tag of this Message.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Message.

        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns.  # noqa: E501

        :param tag: The tag of this Message.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def ttl(self):
        """Gets the ttl of this Message.  # noqa: E501

        The optional number of minutes before the message is deleted. Optional. Omit to prevent delivery report deletion.  # noqa: E501

        :return: The ttl of this Message.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Message.

        The optional number of minutes before the message is deleted. Optional. Omit to prevent delivery report deletion.  # noqa: E501

        :param ttl: The ttl of this Message.  # noqa: E501
        :type: BigDecimal
        """

        self._ttl = ttl

    @property
    def responseemail(self):
        """Gets the responseemail of this Message.  # noqa: E501

        An optional list of email addresses to forward responses to this specific message to. An SMS Works Reply Number is required to use this feature.  # noqa: E501

        :return: The responseemail of this Message.  # noqa: E501
        :rtype: list[str]
        """
        return self._responseemail

    @responseemail.setter
    def responseemail(self, responseemail):
        """Sets the responseemail of this Message.

        An optional list of email addresses to forward responses to this specific message to. An SMS Works Reply Number is required to use this feature.  # noqa: E501

        :param responseemail: The responseemail of this Message.  # noqa: E501
        :type: list[str]
        """

        self._responseemail = responseemail

    @property
    def metadata(self):
        """Gets the metadata of this Message.  # noqa: E501


        :return: The metadata of this Message.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Message.


        :param metadata: The metadata of this Message.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
