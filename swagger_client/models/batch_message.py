# coding: utf-8

"""
    The SMS Works API

    The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.  # noqa: E501

    OpenAPI spec version: 1.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.big_decimal import BigDecimal  # noqa: F401,E501


class BatchMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender': 'str',
        'destinations': 'list[str]',
        'content': 'str',
        'schedule': 'str',
        'tag': 'str',
        'ttl': 'BigDecimal'
    }

    attribute_map = {
        'sender': 'sender',
        'destinations': 'destinations',
        'content': 'content',
        'schedule': 'schedule',
        'tag': 'tag',
        'ttl': 'ttl'
    }

    def __init__(self, sender=None, destinations=None, content=None, schedule=None, tag=None, ttl=None):  # noqa: E501
        """BatchMessage - a model defined in Swagger"""  # noqa: E501
        self._sender = None
        self._destinations = None
        self._content = None
        self._schedule = None
        self._tag = None
        self._ttl = None
        self.discriminator = None
        self.sender = sender
        self.destinations = destinations
        self.content = content
        self.schedule = schedule
        if tag is not None:
            self.tag = tag
        if ttl is not None:
            self.ttl = ttl

    @property
    def sender(self):
        """Gets the sender of this BatchMessage.  # noqa: E501

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.  # noqa: E501

        :return: The sender of this BatchMessage.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this BatchMessage.

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.  # noqa: E501

        :param sender: The sender of this BatchMessage.  # noqa: E501
        :type: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def destinations(self):
        """Gets the destinations of this BatchMessage.  # noqa: E501

        Telephone numbers of each of the recipients  # noqa: E501

        :return: The destinations of this BatchMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this BatchMessage.

        Telephone numbers of each of the recipients  # noqa: E501

        :param destinations: The destinations of this BatchMessage.  # noqa: E501
        :type: list[str]
        """
        if destinations is None:
            raise ValueError("Invalid value for `destinations`, must not be `None`")  # noqa: E501

        self._destinations = destinations

    @property
    def content(self):
        """Gets the content of this BatchMessage.  # noqa: E501

        Message to send to the recipient  # noqa: E501

        :return: The content of this BatchMessage.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BatchMessage.

        Message to send to the recipient  # noqa: E501

        :param content: The content of this BatchMessage.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def schedule(self):
        """Gets the schedule of this BatchMessage.  # noqa: E501

        Date-time at which to send the batch. This is only used by the batch/schedule service.  # noqa: E501

        :return: The schedule of this BatchMessage.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this BatchMessage.

        Date-time at which to send the batch. This is only used by the batch/schedule service.  # noqa: E501

        :param schedule: The schedule of this BatchMessage.  # noqa: E501
        :type: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self._schedule = schedule

    @property
    def tag(self):
        """Gets the tag of this BatchMessage.  # noqa: E501

        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns.  # noqa: E501

        :return: The tag of this BatchMessage.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this BatchMessage.

        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns.  # noqa: E501

        :param tag: The tag of this BatchMessage.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def ttl(self):
        """Gets the ttl of this BatchMessage.  # noqa: E501

        The number of minutes before the message is deleted. Optional. Omit to prevent delivery report deletion.  # noqa: E501

        :return: The ttl of this BatchMessage.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this BatchMessage.

        The number of minutes before the message is deleted. Optional. Omit to prevent delivery report deletion.  # noqa: E501

        :param ttl: The ttl of this BatchMessage.  # noqa: E501
        :type: BigDecimal
        """

        self._ttl = ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
