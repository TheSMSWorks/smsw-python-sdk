# coding: utf-8

"""
    The SMS Works API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BatchMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender': 'str',
        'destinations': 'list[str]',
        'content': 'str',
        'schedule': 'str'
    }

    attribute_map = {
        'sender': 'sender',
        'destinations': 'destinations',
        'content': 'content',
        'schedule': 'schedule'
    }

    def __init__(self, sender=None, destinations=None, content=None, schedule=None):
        """
        BatchMessage - a model defined in Swagger
        """

        self._sender = None
        self._destinations = None
        self._content = None
        self._schedule = None

        self.sender = sender
        self.destinations = destinations
        self.content = content
        self.schedule = schedule

    @property
    def sender(self):
        """
        Gets the sender of this BatchMessage.
        The name of the sender of the message. Avoid spaces or special characters here.

        :return: The sender of this BatchMessage.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this BatchMessage.
        The name of the sender of the message. Avoid spaces or special characters here.

        :param sender: The sender of this BatchMessage.
        :type: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def destinations(self):
        """
        Gets the destinations of this BatchMessage.
        Telephone numbers of each of the recipients

        :return: The destinations of this BatchMessage.
        :rtype: list[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """
        Sets the destinations of this BatchMessage.
        Telephone numbers of each of the recipients

        :param destinations: The destinations of this BatchMessage.
        :type: list[str]
        """
        if destinations is None:
            raise ValueError("Invalid value for `destinations`, must not be `None`")

        self._destinations = destinations

    @property
    def content(self):
        """
        Gets the content of this BatchMessage.
        Message to send to the recipient

        :return: The content of this BatchMessage.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this BatchMessage.
        Message to send to the recipient

        :param content: The content of this BatchMessage.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def schedule(self):
        """
        Gets the schedule of this BatchMessage.
        Date-time at which to send the batch. This is only used by the batch/schedule service.

        :return: The schedule of this BatchMessage.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this BatchMessage.
        Date-time at which to send the batch. This is only used by the batch/schedule service.

        :param schedule: The schedule of this BatchMessage.
        :type: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BatchMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
