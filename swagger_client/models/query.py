# coding: utf-8

"""
    The SMS Works API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Query(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'destination': 'str',
        'sender': 'str',
        'keyword': 'str',
        '_from': 'str',
        'to': 'str'
    }

    attribute_map = {
        'status': 'status',
        'destination': 'destination',
        'sender': 'sender',
        'keyword': 'keyword',
        '_from': 'from',
        'to': 'to'
    }

    def __init__(self, status=None, destination=None, sender=None, keyword=None, _from=None, to=None):
        """
        Query - a model defined in Swagger
        """

        self._status = None
        self._destination = None
        self._sender = None
        self._keyword = None
        self.__from = None
        self._to = None

        if status is not None:
          self.status = status
        if destination is not None:
          self.destination = destination
        if sender is not None:
          self.sender = sender
        if keyword is not None:
          self.keyword = keyword
        if _from is not None:
          self._from = _from
        if to is not None:
          self.to = to

    @property
    def status(self):
        """
        Gets the status of this Query.
        The status of the messages you would like returned (either 'SENT', 'DELIVERED', 'EXPIRED', 'DELETED', 'UNDELIVERABLE', 'ACCEPTED', 'UNKNOWN', 'REJECTED')

        :return: The status of this Query.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Query.
        The status of the messages you would like returned (either 'SENT', 'DELIVERED', 'EXPIRED', 'DELETED', 'UNDELIVERABLE', 'ACCEPTED', 'UNKNOWN', 'REJECTED')

        :param status: The status of this Query.
        :type: str
        """

        self._status = status

    @property
    def destination(self):
        """
        Gets the destination of this Query.
        The phone number of the recipient

        :return: The destination of this Query.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this Query.
        The phone number of the recipient

        :param destination: The destination of this Query.
        :type: str
        """

        self._destination = destination

    @property
    def sender(self):
        """
        Gets the sender of this Query.
        The sender of the message (this can be the configured sender name for an outbound message or the senders phone numner for an inbound message).

        :return: The sender of this Query.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this Query.
        The sender of the message (this can be the configured sender name for an outbound message or the senders phone numner for an inbound message).

        :param sender: The sender of this Query.
        :type: str
        """

        self._sender = sender

    @property
    def keyword(self):
        """
        Gets the keyword of this Query.
        The keyword used in the inbound message

        :return: The keyword of this Query.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """
        Sets the keyword of this Query.
        The keyword used in the inbound message

        :param keyword: The keyword of this Query.
        :type: str
        """

        self._keyword = keyword

    @property
    def _from(self):
        """
        Gets the _from of this Query.
        The date-time from which you would like matching messages

        :return: The _from of this Query.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this Query.
        The date-time from which you would like matching messages

        :param _from: The _from of this Query.
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """
        Gets the to of this Query.
        The date-time to which you would like matching messages

        :return: The to of this Query.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this Query.
        The date-time to which you would like matching messages

        :param to: The to of this Query.
        :type: str
        """

        self._to = to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Query):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
