# coding: utf-8

"""
    The SMS Works API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MessageResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batchid': 'str',
        'content': 'str',
        'created': 'str',
        'customerid': 'str',
        'destination': 'float',
        'keyword': 'str',
        'messageid': 'str',
        'modified': 'str',
        'schedule': 'str',
        'status': 'str',
        'sender': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'batchid': 'batchid',
        'content': 'content',
        'created': 'created',
        'customerid': 'customerid',
        'destination': 'destination',
        'keyword': 'keyword',
        'messageid': 'messageid',
        'modified': 'modified',
        'schedule': 'schedule',
        'status': 'status',
        'sender': 'sender',
        'tag': 'tag'
    }

    def __init__(self, batchid=None, content=None, created=None, customerid=None, destination=None, keyword=None, messageid=None, modified=None, schedule=None, status=None, sender=None, tag=None):
        """
        MessageResponse - a model defined in Swagger
        """

        self._batchid = None
        self._content = None
        self._created = None
        self._customerid = None
        self._destination = None
        self._keyword = None
        self._messageid = None
        self._modified = None
        self._schedule = None
        self._status = None
        self._sender = None
        self._tag = None

        self.batchid = batchid
        self.content = content
        self.created = created
        self.customerid = customerid
        self.destination = destination
        self.keyword = keyword
        self.messageid = messageid
        self.modified = modified
        self.schedule = schedule
        self.status = status
        self.sender = sender
        self.tag = tag

    @property
    def batchid(self):
        """
        Gets the batchid of this MessageResponse.

        :return: The batchid of this MessageResponse.
        :rtype: str
        """
        return self._batchid

    @batchid.setter
    def batchid(self, batchid):
        """
        Sets the batchid of this MessageResponse.

        :param batchid: The batchid of this MessageResponse.
        :type: str
        """
        if batchid is None:
            raise ValueError("Invalid value for `batchid`, must not be `None`")

        self._batchid = batchid

    @property
    def content(self):
        """
        Gets the content of this MessageResponse.

        :return: The content of this MessageResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this MessageResponse.

        :param content: The content of this MessageResponse.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def created(self):
        """
        Gets the created of this MessageResponse.

        :return: The created of this MessageResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this MessageResponse.

        :param created: The created of this MessageResponse.
        :type: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def customerid(self):
        """
        Gets the customerid of this MessageResponse.

        :return: The customerid of this MessageResponse.
        :rtype: str
        """
        return self._customerid

    @customerid.setter
    def customerid(self, customerid):
        """
        Sets the customerid of this MessageResponse.

        :param customerid: The customerid of this MessageResponse.
        :type: str
        """
        if customerid is None:
            raise ValueError("Invalid value for `customerid`, must not be `None`")

        self._customerid = customerid

    @property
    def destination(self):
        """
        Gets the destination of this MessageResponse.

        :return: The destination of this MessageResponse.
        :rtype: float
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this MessageResponse.

        :param destination: The destination of this MessageResponse.
        :type: float
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def keyword(self):
        """
        Gets the keyword of this MessageResponse.

        :return: The keyword of this MessageResponse.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """
        Sets the keyword of this MessageResponse.

        :param keyword: The keyword of this MessageResponse.
        :type: str
        """
        if keyword is None:
            raise ValueError("Invalid value for `keyword`, must not be `None`")

        self._keyword = keyword

    @property
    def messageid(self):
        """
        Gets the messageid of this MessageResponse.

        :return: The messageid of this MessageResponse.
        :rtype: str
        """
        return self._messageid

    @messageid.setter
    def messageid(self, messageid):
        """
        Sets the messageid of this MessageResponse.

        :param messageid: The messageid of this MessageResponse.
        :type: str
        """
        if messageid is None:
            raise ValueError("Invalid value for `messageid`, must not be `None`")

        self._messageid = messageid

    @property
    def modified(self):
        """
        Gets the modified of this MessageResponse.

        :return: The modified of this MessageResponse.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this MessageResponse.

        :param modified: The modified of this MessageResponse.
        :type: str
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")

        self._modified = modified

    @property
    def schedule(self):
        """
        Gets the schedule of this MessageResponse.

        :return: The schedule of this MessageResponse.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this MessageResponse.

        :param schedule: The schedule of this MessageResponse.
        :type: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def status(self):
        """
        Gets the status of this MessageResponse.

        :return: The status of this MessageResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this MessageResponse.

        :param status: The status of this MessageResponse.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def sender(self):
        """
        Gets the sender of this MessageResponse.

        :return: The sender of this MessageResponse.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this MessageResponse.

        :param sender: The sender of this MessageResponse.
        :type: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def tag(self):
        """
        Gets the tag of this MessageResponse.

        :return: The tag of this MessageResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this MessageResponse.

        :param tag: The tag of this MessageResponse.
        :type: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MessageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
