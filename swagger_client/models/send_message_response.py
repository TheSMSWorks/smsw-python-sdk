# coding: utf-8

"""
    The SMS Works API

    The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.  # noqa: E501

    OpenAPI spec version: 1.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SendMessageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'messageid': 'str',
        'status': 'str',
        'credits': 'float',
        'credits_used': 'float'
    }

    attribute_map = {
        'messageid': 'messageid',
        'status': 'status',
        'credits': 'credits',
        'credits_used': 'creditsUsed'
    }

    def __init__(self, messageid=None, status=None, credits=None, credits_used=None):  # noqa: E501
        """SendMessageResponse - a model defined in Swagger"""  # noqa: E501
        self._messageid = None
        self._status = None
        self._credits = None
        self._credits_used = None
        self.discriminator = None
        self.messageid = messageid
        self.status = status
        self.credits = credits
        self.credits_used = credits_used

    @property
    def messageid(self):
        """Gets the messageid of this SendMessageResponse.  # noqa: E501


        :return: The messageid of this SendMessageResponse.  # noqa: E501
        :rtype: str
        """
        return self._messageid

    @messageid.setter
    def messageid(self, messageid):
        """Sets the messageid of this SendMessageResponse.


        :param messageid: The messageid of this SendMessageResponse.  # noqa: E501
        :type: str
        """
        if messageid is None:
            raise ValueError("Invalid value for `messageid`, must not be `None`")  # noqa: E501

        self._messageid = messageid

    @property
    def status(self):
        """Gets the status of this SendMessageResponse.  # noqa: E501


        :return: The status of this SendMessageResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SendMessageResponse.


        :param status: The status of this SendMessageResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def credits(self):
        """Gets the credits of this SendMessageResponse.  # noqa: E501

        The number of remaining credits on your SMS Works account. Floating point number.  # noqa: E501

        :return: The credits of this SendMessageResponse.  # noqa: E501
        :rtype: float
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this SendMessageResponse.

        The number of remaining credits on your SMS Works account. Floating point number.  # noqa: E501

        :param credits: The credits of this SendMessageResponse.  # noqa: E501
        :type: float
        """
        if credits is None:
            raise ValueError("Invalid value for `credits`, must not be `None`")  # noqa: E501

        self._credits = credits

    @property
    def credits_used(self):
        """Gets the credits_used of this SendMessageResponse.  # noqa: E501

        The number of credits used to send the message. Floating point number.  # noqa: E501

        :return: The credits_used of this SendMessageResponse.  # noqa: E501
        :rtype: float
        """
        return self._credits_used

    @credits_used.setter
    def credits_used(self, credits_used):
        """Sets the credits_used of this SendMessageResponse.

        The number of credits used to send the message. Floating point number.  # noqa: E501

        :param credits_used: The credits_used of this SendMessageResponse.  # noqa: E501
        :type: float
        """
        if credits_used is None:
            raise ValueError("Invalid value for `credits_used`, must not be `None`")  # noqa: E501

        self._credits_used = credits_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendMessageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendMessageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
